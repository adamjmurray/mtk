grammar MTK_Grammar
  include MTK

  rule timeline
    ( '{' space? number space? ':' space? note_like (space number space? ':' space? note_like)* space? '}' ) {
      Timeline.from_a values(:number).zip(values :note_like)
    }
  end

  rule note_like
    note_list | note
  end

  rule note_list
    ( '[' space? note (space note)* space? ']' ) {
      values(:note)
    }
  end

  rule note
    ( '{' space? pitch space intensity space duration space? '}' ) {
      Note(pitch.value, intensity.value, duration.value)
    }
  end

  rule pitch_sequence
    ( left_paren pitch_like (space pitch_like)* right_paren ) {
      Pattern.PitchSequence *values(:pitch_like)
    }
  end

  rule intensity_sequence
    ( left_paren intensity (space intensity)* right_paren ) {
      Pattern.IntensitySequence *values(:intensity)
    }
  end

  rule duration_sequence
    ( left_paren duration (space duration)* right_paren ) {
      Pattern.DurationSequence *values(:duration)
    }
  end

  rule pitch_like
    chord | pitch | pitch_class | interval
  end

  rule chord
    ( '[' space? pitch (space pitch)* space? ']' ) {
        Chord *values(:pitch)
    }
  end

  rule pitch
    ( pitch_class int ) {
      Pitch[pitch_class.value, int.value]
    }
  end

  rule pitch_class
    ( [A-Ga-g] [#b]*2 ) {
      PitchClass[to_s]
    }
  end

  rule interval
    ( 'P' [1458] | [Mm] [2367] | 'TT' ) {
      Intervals[to_s]
    }
  end

  rule intensity
    ( ('p'1*3 | 'mp' | 'mf' | 'f'1*3) ('+'|'-')? ) {
      Intensities[to_s]
    }
  end

  rule duration
    ( [whqesrx] ('.'|'t')* ) {
      Durations[to_s]
    }
  end

  rule number
    float | int
  end

  rule float
    ( '-'? [0-9]+ '.' [0-9]+ ) {
      to_f
    }
  end

  rule int
    ( '-'? [0-9]+ ) {
      to_i
    }
  end

  rule left_paren
    ( '(' space? ) { nil }
  end

  rule right_paren
    ( space? ')' ) { nil }
  end

  rule left_bracket
    ( '[' space? ) { nil }
  end

  rule right_bracket
    ( space? ']' )  { nil }
  end

  rule space
    [\s]+ { nil }
  end

end
