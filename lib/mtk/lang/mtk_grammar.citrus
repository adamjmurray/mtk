grammar MTK_Grammar
  include MTK

  rule timeline
    ( '{' space? number space? '=>' space? pattern (space number space? '=>' space? pattern)* space? '}' ) {
      Timeline.from_a values(:number).zip(values :pattern)
    }
  end

  rule pattern
    sequence | chain
  end

  rule sequence
    ( left_paren sequenceable (space sequenceable)* right_paren ) {
      Patterns.Sequence *values(:sequenceable)
    }
  end

  rule chain
    ( sequenceable (':' sequenceable)* ){
      Patterns.Chain *values(:sequenceable)
    }
  end

  rule sequenceable
    ( chord | intensity | duration | interval | pitch | pitch_class )
  end

  rule chord
    ( '[' space? pitch (space pitch)* space? ']' ) {
        Chord *values(:pitch)
    }
  end

  rule pitch
    ( pitch_class int ) {
      Pitch[pitch_class.value, int.value]
    }
  end

  rule pitch_class
    ( [A-Ga-g] [#b]*2 ) {
      PitchClass[to_s]
    }
  end

  rule interval
    ( [Pp] [1458] | ('maj'|'min'|[Mm]) [2367] | 'TT' | 'tt' ) {
      Interval.from_s(to_s)
    }
  end

  rule intensity
    ( ('p'1*3 | 'mp' | 'mf' | 'o' | 'f'2*3) ('+'|'-')? ) {
      Intensity.from_s(to_s)
    }
  end

  rule duration
    ( [whqisrx] ('.'|'t')* ) {
      Duration.from_s(to_s)
    }
  end

  rule number
    float | int
  end

  rule float
    ( '-'? [0-9]+ '.' [0-9]+ ) {
      to_f
    }
  end

  rule int
    ( '-'? [0-9]+ ) {
      to_i
    }
  end

  rule left_paren
    ( '(' space? ) { nil }
  end

  rule right_paren
    ( space? ')' ) { nil }
  end

  rule left_bracket
    ( '[' space? ) { nil }
  end

  rule right_bracket
    ( space? ']' )  { nil }
  end

  rule space
    [\s]+ { nil }
  end

end
