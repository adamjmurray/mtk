#!/usr/bin/env ruby

require 'mtk'
require 'optparse'

options = {}


#######################################################################

option_parser = OptionParser.new do |opts|

  opts.banner = "Usage: #{$0} [options]"
  opts.separator ''
  opts.separator 'Options:'

   opts.on('-c FILE', '--convert FILE', 'Convert a file containing MTK syntax to MIDI',
          'if a --file is given, write the MIDI to a file',
          'if an --output is given, play the MIDI',
          'otherwise print the MIDI') {|file| options[:convert] = file }

  opts.separator ''

  opts.on('-e [syntax]', '--eval [syntax]', 'Convert the given MTK syntax String to MIDI',
          'or start an interactive interpreter when [syntax] is omitted',
          'Behaves like --convert when a --file or --output is given') {|syntax| options[:eval] = syntax }

  opts.separator ''

  opts.on('-f FILE', '--file FILE', 'Write the output of --convert, --eval, --input, or --watch to a file'
         ) {|file| options[:file] = file }

  opts.separator ''

  opts.on('-h', '--help', 'Show this message') { puts opts; exit }

  opts.separator ''

  opts.on('-i INPUT', '--input INPUT', 'Set MIDI input for recording',
          'if no --file is specified, prints the recorded MIDI') {|input| options[:input] = input }

  opts.separator ''

  opts.on('-l', '--list', 'List available MIDI devices for --input and --output') { options[:list] = true }

  opts.separator ''

  opts.on('-m', '--monitor', 'Monitor MIDI input while recording') { options[:monitor] = true }

  opts.separator ''

  opts.on('-o OUTPUT', '--output OUTPUT', 'Set MIDI output for playing') {|output| options[:output] = output }

  opts.separator ''

  opts.on('-p FILE', '--play FILE', 'Play or print the contents of a MIDI file',
          'if no --output is specified, print the MIDI file') {|file| options[:play] = file }

  opts.separator ''

  opts.on('-t', '--tutorial', 'Start an interactive tutorial for the MTK syntax') { options[:tutorial] = true }

  opts.separator ''

  opts.on('-w FILE', '--watch FILE', 'Watch an MTK syntax file for changes and automatically convert to MIDI',
          'Behaves like --convert when a --file or --output is given') {|file| options[:watch] = file }

end


#######################################################################

puts option_parser and exit if ARGV.length == 0
#p ARGV
#p options

ERROR_INVALID_COMMAND  = 1
ERROR_FILE_NOT_FOUND   = 2
ERROR_OUTPUT_NOT_FOUND = 3
ERROR_INPUT_NOT_FOUND  = 4

# Immediately trying to play output while Ruby is still "warming up" can cause timing issues with
# the first couple notes. So we play this "empty" Timeline containing a rest to address that issue.
WARMUP = MTK::Events::Timeline.from_h( {0 => MTK.Note(60,-1)} )

#######################################################################

begin
  option_parser.parse!
rescue OptionParser::MissingArgument, OptionParser::InvalidOption
  puts "Invalid command, #{$!}"
  puts "For command line help: #{$0} --help"
  puts "For command line help: #{$0} --help"
  exit ERROR_INVALID_COMMAND
end


def setup_io
  require 'mtk/io/midi_input'
  require 'mtk/io/midi_output'
end


def convert(mtk_syntax)
  sequencer = MTK::Lang::Parser.parse(mtk_syntax)
  if sequencer
    timeline = sequencer.to_timeline
    output(timeline)
  end
rescue Citrus::ParseError
  STDERR.puts $!
end


def output(timelines, print_header='Timeline')
  timelines = [timelines] unless timelines.is_a? Array
  if @output
    @output.play WARMUP
    @output.play timelines.first # TODO: support multiple timelines
  elsif @file
    require 'mtk/io/midi_file'
    MTK.MIDIFile(@file).write timelines
  else
    puts print_header, timelines
    puts
  end
end


def record
  if @input
    print "Press Enter to begin recording MIDI input..."
    gets
    puts "Recording input. Press control-C to stop."
    @input.record monitor:@monitor
    Signal.trap("INT") do # SIGINT = control-C
      @input.stop
      output @input.to_timeline, "\nRecorded MIDI data"
      exit
    end
    loop{ sleep 0.01 }
  end
end


def watch_file_updated?
  mtime = File.stat(@watch_file).mtime
  updated = @watch_file_mtime.nil? || @watch_file_mtime < mtime
  @watch_file_mtime = mtime
  updated
end


#######################################################################

if options[:list]
  setup_io
  input_names  = MTK::IO::MIDIInput.devices_by_name.keys
  output_names = MTK::IO::MIDIOutput.devices_by_name.keys
  puts
  puts (['INPUTS:'] + input_names).join("\n * ")
  puts
  puts (['OUTPUTS:']+output_names).join("\n * ")
  puts
  puts 'When specifying --input INPUT or --output OUTPUT, the first substring match will be used.'
  puts "For example: --output IAC will use 'Apple Inc. IAC Driver' if it's the first OUTPUT containing 'IAC'"
  puts
  exit
end

@monitor = true if options[:monitor]

if options[:input]
  setup_io
  input_name = options[:input]
  @input = MTK::IO::MIDIInput.find_by_name /#{input_name}/
  if @input
    puts "Using input '#{@input.name}'"
  else
    STDERR.puts "Input '#{input_name}' not found."
    exit ERROR_INPUT_NOT_FOUND
  end
end

if options[:output]
  setup_io
  output_name = options[:output]
  @output = MTK::IO::MIDIOutput.find_by_name /#{output_name}/i
  if @output
    puts "Using output '#{@output.name}'"
  else
    STDERR.puts "Output '#{output_name}' not found."
    exit ERROR_OUTPUT_NOT_FOUND
  end
end

file = options[:file]
@file = file if file

if options[:play]
  filename = options[:play]
  require 'mtk/io/midi_file'
  timelines = MTK.MIDIFile(filename).to_timelines
  output(timelines, "Timeline for #{filename}")
end

if options.has_key? :eval
  mtk_syntax = options[:eval]
  if mtk_syntax.nil?
    puts "Starting the interactive interpreter."
    begin
      loop do
        puts "Enter MTK syntax. Press Ctrl+C to exit."
        convert(gets)
      end
    rescue SystemExit,Interrupt
      Kernel.exit
    end
  else
    convert(mtk_syntax)
  end
end

if options[:convert]
  mtk_syntax_file = options[:convert]
  mtk_syntax = IO.read(mtk_syntax_file)
  convert(mtk_syntax)
end

if options[:watch]
  @watch_file = options[:watch]
  puts "Watching #{@watch_file}. Press Ctrl+C to exit."
  watch_file_updated? # prime the watcher
  begin
    loop do
      mtk_syntax = IO.read(@watch_file)
      convert(mtk_syntax)
      Kernel.sleep(0.5) until watch_file_updated?
      puts "#{Time.new}: #{@watch_file} updated"
    end
  rescue SystemExit,Interrupt
    Kernel.exit
  end
end

if options.has_key? :tutorial
  require 'mtk/lang/tutorial'
  tutorial = MTK::Lang::Tutorial.new
  tutorial.run(@output)
end

record if @input
